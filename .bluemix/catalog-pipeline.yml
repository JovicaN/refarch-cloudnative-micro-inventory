---
stages:
- name: Build
  inputs:
  - service: ${REPO}
    type: git
    branch: ${BRANCH}
  triggers:
  - type: commit
  jobs:
  - name: Build
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${NAME}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |-
      #!/bin/bash
      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.  
      log_and_echo "$LABEL" "Starting build script"

      export JAVA_HOME=~/java8

      cd catalog; ./gradlew build docker
      cd ..
      pwd

      cp -r catalog/docker/* .

      find .

      # The IBM Container BM Containers plug-in (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix 
      #####################
      # Run unit tests    #
      #####################
      log_and_echo "$LABEL" "No unit tests cases have been checked in"

      SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed "s/\(.*\)\((.*\)/\1/")
      IMAGE_NAME=$(echo $IMAGE_NAME|sed "s/-$SPACE//")
      REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
      FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}

      ######################################
      # Build Container via Dockerfile     #
      ######################################
            
      REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
      FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${APPLICATION_VERSION}
      # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.

      if [ -f Dockerfile ]; then 
          log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
          ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
          # build image
          BUILD_COMMAND=""
          if [ "${USE_CACHED_LAYERS}" == "true" ]; then 
              BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          else 
              BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          fi 

          if [ $RESULT -ne 0 ]; then
              log_and_echo "$ERROR" "Error building image"
              ice_retry info 
              ice_retry images
              ${EXT_DIR}/print_help.sh
              ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"      
              exit 1
          else
              log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
              ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
          fi  
      else 
          log_and_echo "$ERROR" "Dockerfile not found in project"      
          ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
          exit 1
      fi  

      ######################################################################################
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
      ######################################################################################
      echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties
      echo "image = $IMAGE_NAME"
      log_and_echo "image = $IMAGE_NAME"
      log_and_echo "repository = $FULL_REPOSITORY_NAME"

- name: Deploy
  inputs:
  - type: job
    stage: Build
    job: Build
  triggers:
  - type: stage
  properties:
  - name: DESIRED_INSTANCES
    value: ${DESIRED_INSTANCES}
    type: text
  - name: ELASTICSEARCH_PASSWORD
    value: ${ELASTICSEARCH_PASSWORD}
    type: secure
  - name: ELASTICSEARCH_URL
    value: ${ELASTICSEARCH_URL}
    type: text
  - name: ELASTICSEARCH_USER
    value: ${ELASTICSEARCH_USER}
    type: text
  - name: EUREKA_REGISTRY_URL
    value: ${EUREKA_REGISTRY_URL}
    type: text
  - name: MAX_INSTANCES
    value: ${MAX_INSTANCES}
    type: text
  - name: MEMORY
    value: ${MEMORY}
    type: text
  - name: MIN_INSTANCES
    value: ${MIN_INSTANCES}
    type: text
  - name: ROUTE_HOSTNAME
    value: ${NAME}
    type: text
  - name: CLUSTER_NAME
    value: ${CLUSTER_NAME}
    type: text
  - name: BLUEMIX_USER
    value: ${BLUEMIX_USER}
    type: text
  - name: BLUEMIX_PASSWORD
    value: ${BLUEMIX_PASSWORD}
    type: secure
  - name: BLUEMIX_ACCOUNT
    value: ${BLUEMIX_ACCOUNT}
    type: text
  - name: BLUEMIX_ORG
    value: ${ORG}
    type: text
  - name: BLUEMIX_SPACE
    value: ${SPACE}
    type: text
  - name: IMAGE_NAME
    value: ${IMAGE_NAME}
    type: text
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
      application: Pipeline
    OPTIONAL_ARGS: -m "${MEMORY}"
    PORT: ${PORT}
    CONTAINER_NAME: ${NAME}
    DEPLOY_TYPE: red_black
    COMMAND: |-
      #!/bin/bash

      set -x
      echo -e ${FULL_REPOSITORY_NAME}
      echo -e "image repo = ${FULL_REPOSITORY_NAME}"
      echo -e "Stuff 1"
      log_and_echo $(cat $ARCHIVE_DIR/build.properties)
      log_and_echo "Stuff 2"
      echo $(cat $ARCHIVE_DIR/build.properties)

      # Install Bluemix CLI
      . ./scripts/install_bx.sh

      # Login into Bluemix CLI
      ./scripts/bx_login.sh
      
      # Deploy catalog into Kubernetes
      ./catalog/deploy.sh

      RESULT=$?

      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
      if [ $RESULT -ne 0 ]; then
          echo -e "${red}Executed failed or had warnings ${no_color}"
          ${EXT_DIR}/print_help.sh
          exit $RESULT
      fi
      echo -e "${green}Execution complete${no_label}"
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
